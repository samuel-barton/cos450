			+--------------------+
       	       	        |    COS 450/550     |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Robert Miller <robert.miller@maine.edu>
Samuel Barton <samuel-barton@maine.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.c 

  /* list that holds threads that have been put to sleep */ 
  static struct list sleep_list;

thread.h : 

  /* part of struct thread; sleep list element */ 
  struct list_elem sleep_elem;              

  /* Tick to wake up on. if (timer_tickes == thread->wakeup_tick) the thread is woke up */
  uint64_t wakeup_tick;



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Here is an explanation of the flow of operations when timer_sleep() is called: 

timer_sleep (int64_t ticks) :
  -parameter represents how many ticks the thread should be asleep
  -assert that interrupts are on
  -check to make sure that ticks are >= 0
  -calculates wakeup_tick by adding ticks to the current tick (timer_ticks())
  -calls new thread_sleep method in thread.c that takes wakeup_tick as a parameter
thread_sleep(int64_t wakeup_ticks) : 
  -sets 0 as a minimum value for wakeup_ticks (in other words, if <= 0 wake up immediately)
  -set the wakeup_tick value of the running thread to the parameter
  -disable interrupts
  -insert running thread into sleeping list by wakeup_tick in ascending order
  -block the running thread by calling thread_block() method
  -enable interrupts 
thread_block() : 
  -assert that interrupts are off
  -set status of running thread to THREAD_BLOCKED
  -call schedule() method to start running next thread 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

  We minimize the time spent with interrupts disabled, and we only use one time-consuming operation,
namely the list_insert_ordered on our wait list.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

  The timer_sleep() method quickly calculates the ticks to wake up on and passes that to thread_sleep(),
which promptly disables interrupts before it inserts the running thread in the sleep list and blocks the thread.
Interrupts should be disabled during the insertion into lists as well as when you are switching running threads, 
which is a direct result of blocking the running thread. 


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

  Race conditions are avoided by use of enabling and disabling interrupts. When manipulating a list, interrupts are
disabled so a thread finishes the manipulation before any interrupt can occur that may require use of the same list. 
Additionally, interrupts are disabled when switching running threads to minimize cpu idle time. 


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

  We chose this design as it is efficient and minimizes the time that interrupts are disabled. Our initial 
implementation attempted to solve this problem without disabling interrupts at all which lead to race issues. Our
second implementation was too cavalier with interrupts are was inefficient. We found a middle ground which both ensured
that our data was processed in the order we intended and was reasonably efficient. 

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
